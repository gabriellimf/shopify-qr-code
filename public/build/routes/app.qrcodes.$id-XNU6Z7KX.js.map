{
  "version": 3,
  "sources": ["../../../app/routes/app.qrcodes.$id.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/app.qrcodes.$id.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/app.qrcodes.$id.jsx\");\n  import.meta.hot.lastModified = \"1707159890154.106\";\n}\n// REMIX HMR END\n\nimport { useState } from \"react\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { useActionData, useLoaderData, useNavigation, useSubmit, useNavigate } from \"@remix-run/react\";\nimport { authenticate } from \"../shopify.server\";\nimport { Card, Bleed, Button, ChoiceList, Divider, EmptyState, InlineStack, InlineError, Layout, Page, Text, TextField, Thumbnail, BlockStack, PageActions } from \"@shopify/polaris\";\nimport { ImageIcon } from \"@shopify/polaris-icons\";\nimport db from \"../db.server\";\nimport { getQRCode, validateQRCode } from \"../models/QRCode.server\";\nexport async function loader({\n  request,\n  params\n}) {\n  const {\n    admin\n  } = await authenticate.admin(request);\n  if (params.id === \"new\") {\n    return json({\n      destination: \"product\",\n      title: \"\"\n    });\n  }\n  return json(await getQRCode(Number(params.id), admin.graphql));\n}\nexport async function action({\n  request,\n  params\n}) {\n  const {\n    session\n  } = await authenticate.admin(request);\n  const {\n    shop\n  } = session;\n\n  /** @type {any} */\n  const data = {\n    ...Object.fromEntries(await request.formData()),\n    shop\n  };\n  if (data.action === \"delete\") {\n    await db.qRCode.delete({\n      where: {\n        id: Number(params.id)\n      }\n    });\n    return redirect(\"/app\");\n  }\n  const errors = validateQRCode(data);\n  if (errors) {\n    return json({\n      errors\n    }, {\n      status: 422\n    });\n  }\n  const qrCode = params.id === \"new\" ? await db.qRCode.create({\n    data\n  }) : await db.qRCode.update({\n    where: {\n      id: Number(params.id)\n    },\n    data\n  });\n  return redirect(`/app/qrcodes/${qrCode.id}`);\n}\nexport default function QRCodeForm() {\n  _s();\n  const errors = useActionData()?.errors || {};\n  const qrCode = useLoaderData();\n  const [formState, setFormState] = useState(qrCode);\n  const [cleanFormState, setCleanFormState] = useState(qrCode);\n  const isDirty = JSON.stringify(formState) !== JSON.stringify(cleanFormState);\n  const nav = useNavigation();\n  const isSaving = nav.state === \"submitting\" && nav.formData?.get(\"action\") !== \"delete\";\n  const isDeleting = nav.state === \"submitting\" && nav.formData?.get(\"action\") === \"delete\";\n  const navigate = useNavigate();\n  async function selectProduct() {\n    const products = await window.shopify.resourcePicker({\n      type: \"product\",\n      action: \"select\" // customized action verb, either 'select' or 'add',\n    });\n    if (products) {\n      const {\n        images,\n        id,\n        variants,\n        title,\n        handle\n      } = products[0];\n      setFormState({\n        ...formState,\n        productId: id,\n        productVariantId: variants[0].id,\n        productTitle: title,\n        productHandle: handle,\n        productAlt: images[0]?.altText,\n        productImage: images[0]?.originalSrc\n      });\n    }\n  }\n  const submit = useSubmit();\n  function handleSave() {\n    const data = {\n      title: formState.title,\n      productId: formState.productId || \"\",\n      productVariantId: formState.productVariantId || \"\",\n      productHandle: formState.productHandle || \"\",\n      destination: formState.destination\n    };\n    setCleanFormState({\n      ...formState\n    });\n    submit(data, {\n      method: \"post\"\n    });\n  }\n  return <Page>\n      <ui-title-bar title={qrCode.id ? \"Edit QR code\" : \"Create new QR code\"}>\n        <button variant=\"breadcrumb\" onClick={() => navigate(\"/app\")}>\n          QR codes\n        </button>\n      </ui-title-bar>\n      <Layout>\n        <Layout.Section>\n          <BlockStack gap=\"500\">\n            <Card>\n              <BlockStack gap=\"500\">\n                <Text as={\"h2\"} variant=\"headingLg\">\n                  Title\n                </Text>\n                <TextField id=\"title\" helpText=\"Only store staff can see this title\" label=\"title\" labelHidden autoComplete=\"off\" value={formState.title} onChange={title => setFormState({\n                ...formState,\n                title\n              })} error={errors.title} />\n              </BlockStack>\n            </Card>\n            <Card>\n              <BlockStack gap=\"500\">\n                <InlineStack align=\"space-between\">\n                  <Text as={\"h2\"} variant=\"headingLg\">\n                    Product\n                  </Text>\n                  {formState.productId ? <Button variant=\"plain\" onClick={selectProduct}>\n                      Change product\n                    </Button> : null}\n                </InlineStack>\n                {formState.productId ? <InlineStack blockAlign=\"center\" gap=\"500\">\n                    <Thumbnail source={formState.productImage || ImageIcon} alt={formState.productAlt} />\n                    <Text as=\"span\" variant=\"headingMd\" fontWeight=\"semibold\">\n                      {formState.productTitle}\n                    </Text>\n                  </InlineStack> : <BlockStack gap=\"200\">\n                    <Button onClick={selectProduct} id=\"select-product\">\n                      Select product\n                    </Button>\n                    {errors.productId ? <InlineError message={errors.productId} fieldID=\"myFieldID\" /> : null}\n                  </BlockStack>}\n                <Bleed marginInlineStart=\"200\" marginInlineEnd=\"200\">\n                  <Divider />\n                </Bleed>\n                <InlineStack gap=\"500\" align=\"space-between\" blockAlign=\"start\">\n                  <ChoiceList title=\"Scan destination\" choices={[{\n                  label: \"Link to product page\",\n                  value: \"product\"\n                }, {\n                  label: \"Link to checkout page with product in the cart\",\n                  value: \"cart\"\n                }]} selected={[formState.destination]} onChange={destination => setFormState({\n                  ...formState,\n                  destination: destination[0]\n                })} error={errors.destination} />\n                  {qrCode.destinationUrl ? <Button variant=\"plain\" url={qrCode.destinationUrl} target=\"_blank\">\n                      Go to destination URL\n                    </Button> : null}\n                </InlineStack>\n              </BlockStack>\n            </Card>\n          </BlockStack>\n        </Layout.Section>\n        <Layout.Section variant=\"oneThird\">\n          <Card>\n            <Text as={\"h2\"} variant=\"headingLg\">\n              QR code\n            </Text>\n            {qrCode ? <EmptyState image={qrCode.image} imageContained={true} /> : <EmptyState image=\"\">\n                Your QR code will appear here after you save\n              </EmptyState>}\n            <BlockStack gap=\"300\">\n              <Button disabled={!qrCode?.image} url={qrCode?.image} download variant=\"primary\">\n                Download\n              </Button>\n              <Button disabled={!qrCode.id} url={`/qrcodes/${qrCode.id}`} target=\"_blank\">\n                Go to public URL\n              </Button>\n            </BlockStack>\n          </Card>\n        </Layout.Section>\n        <Layout.Section>\n          <PageActions secondaryActions={[{\n          content: \"Delete\",\n          loading: isDeleting,\n          disabled: !qrCode.id || !qrCode || isSaving || isDeleting,\n          destructive: true,\n          outline: true,\n          onAction: () => submit({\n            action: \"delete\"\n          }, {\n            method: \"post\"\n          })\n        }]} primaryAction={{\n          content: \"Save\",\n          loading: isSaving,\n          disabled: !isDirty || isSaving || isDeleting,\n          onAction: handleSave\n        }} />\n        </Layout.Section>\n      </Layout>\n    </Page>;\n}\n_s(QRCodeForm, \"TnJqX7Js1TeG6w4qsWDEc9Dsqyk=\", false, function () {\n  return [useActionData, useLoaderData, useNavigation, useNavigate, useSubmit];\n});\n_c = QRCodeForm;\nvar _c;\n$RefreshReg$(_c, \"QRCodeForm\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["init_esm", "_c", "_a", "_b"]
}
